import caapp_gamut_plots as cgp
from collections import Counter
import numpy as np
import warnings

warnings.simplefilter("ignore")

# load the dataset we want to look at
# you only need to run this cell once


# data_path = "data/Masked_Helius_subset_May17/"
data_path = "data/GoEFs_Jul17/"

light_spreadsheet_path = "data/5_day_light.txt"

dataframes = cgp.loadData(data_path, light_spreadsheet_path)


# define a function to identify plants form "early" experiments (which should be corrected)
def isEarly(plantLabel):
    expId_parts = plantLabel.split("[")[3].split("_")
    try:
        return int(expId_parts[0]) <= 21
    except ValueError:
        return True


# define a function to correct spreadsheets
def correctDataFrame(parameter, correctionFactor):
    corrected = dataframes[parameter].copy(deep=True)
    print("corrected {0} dataframe in-place".format(parameter))
    for plantLabel in corrected.index:
        if (isEarly(plantLabel)):
            corrected.loc[plantLabel, :] /= correctionFactor
    dataframes[parameter] = corrected


# correct the computed qesv and npq dataframes (divide early results by these time-resolved factors)
# Use a single number wtihout square brackets to apply the same correction to all timepoints
correctDataFrame("QESV", [4.408522061, 4.482793944, 4.582105093, 4.728140056, 4.926178359, 5.146209987, 5.468185366,
                          5.724655565, 6.126662326, 6.327001587, 6.573081846, 6.490570675, 6.448794565, 6.294517319,
                          6.196914601, 6.100975853, 4.909532161, 4.394984156, 4.025067785, 3.698798448, 3.447793078,
                          3.492812848, 3.520038425, 3.587070402, 3.534401464, 3.461472268, 3.35683648, 3.319207134,
                          3.170993758, 3.258615723, 3.222937692, 3.301296021, 3.336765235, 3.352455553, 3.468204969,
                          3.475532513, 3.693294933, 3.73095491, 3.803247331, 3.801401169, 3.762185828, 3.683453326,
                          3.768541748, 3.883820563, 4.292838442, 4.831735712, 5.694317858, 7.593912217, 5.581625682,
                          4.423229244, 4.544335692, 3.650218294, 3.927280329, 3.432547646, 3.590772123, 3.460353409,
                          3.401602045, 3.233799135, 3.351837913, 2.961318246, 3.286172775, 2.666655728, 3.285709608,
                          2.568940627, 3.266761676, 2.37439829, 3.252638397, 2.277036052, 3.231254426, 2.219316706,
                          3.240105532, 2.154120096, 3.117308411, 2.112489099, 3.153073042, 2.083297558, 3.112022265,
                          2.115273028, 3.140837405, 2.08355694, 3.160740166, 2.093101532, 3.148594353, 2.102211949,
                          3.198329541, 2.096157933, 3.177241733, 2.125125565, 3.301354001, 2.18722597, 3.281684088,
                          2.260231164, 3.321438817, 2.33818573, 3.314646517, 2.447920619, 3.357536138, 2.663189568,
                          3.419077431, 2.771891619, 3.588067482, 3.123955442, 3.750784614, 3.427024511, 4.01717305,
                          3.713431709, 4.482386152, 3.913281681, 5.312464148, 4.427507252, 7.453297318, 5.868913726,
                          4.316760151, 4.43905074, 4.649269227, 4.889446844, 5.407113591, 6.14227428, 7.099395551,
                          7.985683474, 9.389688957, 10.71923893, 12.60355675, 13.72458983, 14.54352573, 14.28871383,
                          14.46159573, 14.15165443, 4.347401138, 3.944127635, 4.904343301, 3.739995479, 3.970988641,
                          3.432370523, 3.711048348, 3.374423317, 3.488268007, 3.245013168, 3.353292167, 3.075303967,
                          3.156691835, 2.832867973, 3.051510025, 2.78268795, 2.967769051, 2.565162278, 2.937472199,
                          2.436954056, 2.901021564, 2.355793661, 2.922060618, 2.2864608, 2.844516503, 2.199292712,
                          2.892461045, 2.152019389, 2.877431284, 2.169045889, 2.929768254, 2.159943889, 2.957164602,
                          2.179521566, 2.947908786, 2.179040064, 2.977992445, 2.154327625, 2.973655057, 2.171932635,
                          3.081126374, 2.245198513, 3.071467129, 2.328311827, 3.125263036, 2.402615123, 3.18535639,
                          2.503660965, 3.289112271, 2.710635552, 3.410290675, 2.779966737, 3.614669707, 3.042628166,
                          3.785891308, 3.296451512, 4.007971706, 3.584571304, 4.34130359, 3.906129767, 4.903947325,
                          4.438429874, 6.187125272, 5.316409339])
correctDataFrame("NPQ",
                 [3.656065789, 3.749162112, 3.857506714, 3.995438534, 4.170041658, 4.38662965, 4.66407628, 4.955318144,
                  5.258915832, 5.447006258, 5.537336278, 5.428241126, 5.337435157, 5.195372357, 5.101296628,
                  4.987339213, 4.339063749, 3.770649191, 3.395684715, 3.144316914, 2.996143693, 3.089791701,
                  3.199530852, 3.337442575, 3.377800082, 3.383128136, 3.340156135, 3.355498769, 3.217896914,
                  3.295355834, 3.274440209, 3.338369321, 3.354339484, 3.360753919, 3.438222893, 3.42470645, 3.592653443,
                  3.542711713, 3.526759437, 3.447090443, 3.342390968, 3.213267821, 3.232419712, 3.302963814,
                  3.559501688, 3.960213964, 4.705964683, 6.872244315, 5.000351962, 4.061780343, 4.194794999,
                  3.335531055, 3.61693431, 3.153792094, 3.278880187, 3.265608202, 3.064150043, 3.224050605, 3.023019525,
                  3.078524315, 2.977951079, 2.836029616, 3.013499221, 2.757628113, 3.040356811, 2.551550025,
                  3.075908596, 2.448107699, 3.096403633, 2.385349326, 3.151534371, 2.311433806, 3.04833932, 2.260641335,
                  3.089716516, 2.228433347, 3.055891366, 2.267966207, 3.080624954, 2.231756151, 3.096165266,
                  2.244260675, 3.069893711, 2.256641779, 3.097601241, 2.248902881, 3.052696574, 2.283429896,
                  3.142136003, 2.356644991, 3.067758856, 2.437553928, 3.05053089, 2.523226697, 3.005246304, 2.632795478,
                  3.003807792, 2.846819779, 3.034781479, 2.914500969, 3.184893676, 3.174040232, 3.337331888,
                  3.317593656, 3.634014569, 3.397272189, 4.068118833, 3.478141089, 4.801805252, 3.916414307,
                  6.563335481, 5.263937099, 4.0572413, 4.20729092, 4.404767175, 4.683482769, 5.191852052, 5.909441606,
                  6.905087245, 8.11431662, 9.909080742, 11.87000289, 14.27757169, 15.91470044, 16.40885007, 16.64918343,
                  16.28388024, 15.88990551, 3.845966473, 3.472433672, 4.528770169, 3.192607385, 3.494133264,
                  3.018078737, 3.248814477, 3.057717112, 3.075222842, 3.090932663, 2.986475833, 3.073544029, 2.85251946,
                  2.939001329, 2.793947614, 2.935585298, 2.750861514, 2.732583579, 2.752362838, 2.609385322,
                  2.749450342, 2.526102627, 2.798845652, 2.453415929, 2.742284674, 2.355732158, 2.788027205,
                  2.300204764, 2.779002601, 2.324048321, 2.831037006, 2.315331483, 2.847683185, 2.340381503,
                  2.837920431, 2.343583017, 2.850701189, 2.314467766, 2.832199545, 2.332823596, 2.909659904,
                  2.420302369, 2.871532456, 2.51212917, 2.879048962, 2.586721188, 2.889211351, 2.680650082, 2.94748771,
                  2.873091851, 3.006749326, 2.891949808, 3.1472435, 3.049851303, 3.265189502, 3.143221299, 3.484941293,
                  3.236206734, 3.817178127, 3.357366766, 4.274156824, 3.673363698, 5.150752903, 4.49270604])
correctDataFrame("PhiNO",
                 [0.679340457, 0.676321599, 0.674329152, 0.671057703, 0.669618127, 0.666737978, 0.661676911, 0.65809062,
                  0.654659663, 0.652452652, 0.650452014, 0.650392767, 0.650743495, 0.650128036, 0.650850021, 0.64995757,
                  0.665604071, 0.667625426, 0.667257927, 0.675625476, 0.681896967, 0.679833568, 0.661180369,
                  0.641733217, 0.6244069, 0.61289981, 0.604692399, 0.597116304, 0.599707216, 0.595064428, 0.59431618,
                  0.592452666, 0.594163186, 0.592810522, 0.591524209, 0.59518999, 0.593631377, 0.607333732, 0.621764766,
                  0.639069159, 0.659095097, 0.673571503, 0.676492625, 0.664847273, 0.648935307, 0.63834835, 0.632908335,
                  0.624477396, 0.640850328, 0.653305479, 0.642820986, 0.656464564, 0.636973012, 0.648256429,
                  0.633749058, 0.614566804, 0.631033294, 0.585225031, 0.624732802, 0.573204433, 0.612930709,
                  0.577648989, 0.599843847, 0.577840797, 0.585859728, 0.590403471, 0.575167281, 0.598119611,
                  0.566340512, 0.602464732, 0.558045873, 0.607905756, 0.561377782, 0.611818857, 0.557384807,
                  0.614660596, 0.557192798, 0.613734523, 0.556748945, 0.61325058, 0.556410198, 0.611508315, 0.559155956,
                  0.609797301, 0.559252577, 0.609896664, 0.564039727, 0.60710005, 0.562014147, 0.599779116, 0.570810372,
                  0.592624758, 0.577655699, 0.585145948, 0.585606037, 0.576050285, 0.590767747, 0.560656071,
                  0.589637677, 0.55717108, 0.583259864, 0.547739797, 0.575124338, 0.552381161, 0.567621144, 0.564966662,
                  0.56167694, 0.574192805, 0.557434823, 0.569171352, 0.54887336, 0.566129313, 0.611717926, 0.603062263,
                  0.602851769, 0.60244461, 0.599193168, 0.59669832, 0.593187692, 0.591629049, 0.58991098, 0.590965444,
                  0.592004475, 0.594538369, 0.597110715, 0.599477467, 0.601072063, 0.602792071, 0.618516278,
                  0.626094817, 0.615373023, 0.626426386, 0.618268659, 0.628953557, 0.612065701, 0.618910294,
                  0.610955692, 0.598655285, 0.609669645, 0.583006563, 0.612145655, 0.579906967, 0.614475728,
                  0.571453783, 0.614353412, 0.581195551, 0.612003462, 0.588108015, 0.609532968, 0.593530507,
                  0.605834437, 0.599060762, 0.607108296, 0.607140098, 0.603873879, 0.612766492, 0.604702355,
                  0.611415316, 0.600603121, 0.611915589, 0.601352884, 0.610194746, 0.601481361, 0.609950439,
                  0.603105921, 0.613706808, 0.604664876, 0.613709809, 0.601437979, 0.606368234, 0.605201859,
                  0.599774842, 0.607777805, 0.596157486, 0.606176503, 0.590513657, 0.60249302, 0.580861501, 0.596710567,
                  0.58092271, 0.588475144, 0.576627108, 0.582688854, 0.577918327, 0.578444861, 0.58073737, 0.573636321,
                  0.578762281, 0.573455042, 0.577363201, 0.570352076, 0.580686531])

# recompute PhiNPQ, since PhiNO was corrected
print("recomputing PhiNPQ ( 1- Phi2 - PhiNO ) using corrected PhiNO")
dataframes["PhiNPQ"] = 1 - dataframes["Phi2"] - dataframes["PhiNO"]

# filter all data based on some meta-data
metadata_header = "GoEF_Catagory"
target_values = ["gold", "all", "ringers"]

filtered_dataframes = {}

# Col-0 are not included
print("selecting only data where {0} = {1}".format(metadata_header, target_values))
mdf = dataframes["metadata"]
target_labels = mdf.loc[mdf[metadata_header].isin(target_values)].index
for key in dataframes.keys():
    df = dataframes[key]
    filtered_dataframes[key] = df.loc[df.index.isin(target_labels)]

# create averaged dataframes
# first average by mutant/flat
# then average by mutant

mutant_flat_avg_filtered_dataframes = {}
for key in filtered_dataframes.keys():
    df = filtered_dataframes[key]
    df["mutant"] = [s.split("[")[0] for s in df.index]
    df["flat"] = [s.split("[")[2][:-1] for s in df.index]
    mutant_flat_avg_filtered_dataframes[key] = df.groupby(['mutant', 'flat']).mean().reset_index()

mutant_avg_filtered_dataframes = {}
for key in mutant_flat_avg_filtered_dataframes.keys():
    df = mutant_flat_avg_filtered_dataframes[key]
    mutant_avg_filtered_dataframes[key] = df.groupby("mutant").mean()